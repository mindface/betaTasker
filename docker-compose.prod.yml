
services:
  backend:
    container_name: backend-prod
    build:
      context: ./backer/godotask
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=production
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=dbgodotask
      - DB_PASSWORD=dbgodotask
      - DB_NAME=dbgodotask
      - GIN_MODE=release
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
      - APP_ENV=production
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    container_name: frontend-prod
    build:
      context: ./fronter
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8080
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    container_name: nginx-prod
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: db-prod
    environment:
      POSTGRES_USER: dbgodotask
      POSTGRES_PASSWORD: dbgodotask
      POSTGRES_DB: dbgodotask
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbgodotask"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: